{"name":"Suid","tagline":"Distributed Service-Unique IDs that are short and sweet.","body":"# ws.suid <sub><sup>v0.10.0</sup></sub>\r\n**Distributed Service-Unique IDs that are short and sweet.** \r\n\r\nSuids are IDs that are:\r\n\r\n* Short\r\n* Unique across a service or site\r\n* Ordered\r\n* Easy for humans to read, write and pronounce\r\n* 53 bits so they fit into a single Javascript or PHP Number, Java Long, SQL BigInt etc.\r\n* Sweet!\r\n\r\n## Download\r\n* Commented (~7kB): [suid.js](https://github.com/Download/suid/releases/download/0.10.0/suid.js)\r\n* Minified (~3 KB): [suid.min.js](https://github.com/Download/suid/releases/download/0.10.0/suid.min.js)\r\n* Map file: [suid.min.js.map](https://github.com/Download/suid/releases/download/0.10.0/suid.min.js.map)\r\n\r\n## CDN\r\n* Commented: `//cdn.rawgit.com/download/suid/0.10.0/dist/suid.js`\r\n* Minified : `//cdn.rawgit.com/download/suid/0.10.0/dist/suid.min.js`\r\n* Map file : `//cdn.rawgit.com/download/suid/0.10.0/dist/suid.min.js.map`\r\n\r\n## NPM\r\n* `npm install --save-dev ws.suid`\r\n\r\n## Bower\r\n* `bower install download/suid --save`\r\n\r\n## Usage\r\n* Include suid.js on your webpage\r\n* Configure the URL of the suid server\r\n* Call `Suid.next()` to generate IDs\r\n* Use options to provide seed data and control pool behavior\r\n\r\n### Configure the URL of the suid server\r\nThis is the only mandatory configuration. Like all configuration in suid.js, it can be done in three ways:\r\n* By setting a script attribute\r\n* By calling `Suid.configure(options)`\r\n* By creating a global configuration object\r\n\r\n#### By setting a script attribute\r\nYou can pass the URL to the suid server right in the script tag by setting\r\nthe attribute `data-suid-server` to the URL of the server:\r\n```xml\r\n<script src=\"//cdn.rawgit.com/download/suid/0.10.0/dist/suid.min.js\" \r\n        data-suid-server=\"/suid/suid.json\"></script>\r\n```\r\n\r\n#### By calling `Suid.configure(options)`\r\nInstead of using script attributes, once suid.js has loaded, you can call\r\n`Suid.configure(options)`, where `options` is an options object:\r\n```js\r\nSuid.configure({server: '/suid.suid,json'});\r\n```\r\n\r\n#### By creating a global configuration object\r\nSometimes you want to set your configuration *before* loading your scripts. Suid.js allows for that.\r\nIf, by the time suid.js is loaded, an object exists in the global scope called `Suid`, suid.js will\r\npick it up and use it to configure itself before replacing it with the `Suid` function:\r\n```\r\n<script>var Suid = {server:'/suid/suid.json'};</script>\r\n<script src=\"//cdn.rawgit.com/download/suid/0.10.0/dist/suid.min.js\"></script>\r\n```\r\n\r\n### Call `Suid.next()` to generate IDs\r\n```javascript\r\nvar myId = Suid.next();\r\nalert(myId);             // 14she\r\nalert(myId.valueOf());   // 1903154\r\nvar halve = myId / 2;\r\nvar halveId = new Suid(halve);\r\nalert(halve);            // 951577\r\nalert(halveId);          // ke8p\r\nvar src = {id: myId, name: 'test'};\r\nvar json = JSON.stringify(src);\r\nalert(json);             // '{\"id\":\"14she\",\"name\":\"test\"}'\r\nvar dst = JSON.parse(json, Suid.revive('id'));\r\nalert(dst.id);           // 14she\r\n```\r\n*Don't create new IDs by adding to existing IDs!<br>\r\n Just call `Suid.next()` again.*\r\n\r\n## Options\r\nYou can specify options by including the `data-suid-options` attribute in the script element \r\nand giving a pseudo-json options string, like so:\r\n```xml\r\n<script src=\"//cdn.rawgit.com/download/suid/0.10.0/dist/suid.min.js\" \r\n\t\tdata-suid-server=\"suid/suid.json\"\r\n\t\tdata-suid-options=\"{'min':4, 'max':6, 'seed':['14she', '14sky']}\"></script>\r\n```\r\nThe pseudo-json is basically normal json but with single quotes instead of double.\r\n\r\nWhen using the global configuration object or `Suid.configure` to specify options instead\r\nof the script attributes, just add the extra options to the options object:\r\n```js\r\n// Before loading suid.js:\r\nvar Suid = {server:'/suid/suid.json', min:4, max:6, seed:['14she', '14sky']};\r\n// or after loading suid.js:\r\nSuid.configure({server:'/suid/suid.json', min:4, max:6, seed:['14she', '14sky']});\r\n```\r\n\r\n### Seed option\r\nThe `seed` option allows you to pre-configure suid.js with the first suid blocks,\r\nso it will be able to generate ID's right away. If you don't provide seed blocks,\r\nand no suid blocks are in the pool in localstorage, suid.js will fire an Ajax \r\nrequest right away to fetch the first blocks. This does however cause some latency\r\nand a small period in which suid.js will not be able to serve any IDs.\r\n\r\nTo provide seed blocks, we generate suid blocks on the server on the first request\r\nand pass them to suid.js in option `seed`, using any of the methods discussed above.\r\n\r\nE.g.:\r\n```js\r\nSuid.configure({seed: ['14she', '14sky']}); \r\n```\r\n\r\n### Suid pool options\r\nThe suid script fetches suid blocks from the suid server and stores them in a pool in \r\n[localStorage](http://www.w3.org/TR/webstorage/#storage) \r\n([browser support](http://caniuse.com/#search=localstorage)). This pool is accessible from \r\nall tabs that are from the same domain, maximizing the efficient use of suid blocks. \r\n\r\nYou can control the behaviour of the pool with two settings:\r\n  \r\n* `min`: Minimum number of suid blocks to keep in the pool, defaults to 3\r\n* `max`: Maximum number of suid blocks to keep in the pool, defaults to 4\r\n\r\nOption `min` determines how low the amount of blocks in the pool may become before the script \r\nwill request new blocks from the server. Option `max` determines how many blocks the script \r\nwill fetch during each request in order to fill the pool up again. If your application has \r\nmoments in which it consumes a lot of IDs in a short timeframe, or if your application is expected \r\nto be used offline for prolonged periods, choose a `min` that ensures enough IDs will always be \r\nin the pool to supply those IDs. If you want to reduce the number of requests for ID blocks \r\n(at the expense of more ID blocks going wasted when caches are cleared etc) choose a `max` that \r\nis a number of blocks higher then your `min`.\r\n\r\nAt most 8 blocks can be requested from the pool simultaneously (when using `suid-server-java`) \r\nso bear this in mind when configuring your pool. I would guess that the default settings are \r\ngood enough for most people.\r\n\r\n## Suid pool exhausted exceptions\r\nI have found that you will mostly get away with generating suids whenever you need them and\r\nsuid.js will be able to maintain the pool of suid blocks very effectively. However there is\r\nalways the possibility of the pool being empty for some reason. So if you want to play it safe\r\nyou should wrap calls to `Suid.next()` in a `try...catch` block as it will throw an error\r\nwhen the pool is exhausted:\r\n```js\r\ntry {\r\n    var id = Suid.next();\r\n} \r\ncatch(e) {\r\n    // deal with it somehow... Either schedule a retry or show an error etc\r\n}\r\n```\r\n\r\nOnce the pool is filled this will be a very rare occurance, but you are guaranteed\r\nto get it when you have an empty localstorage and load a page containing this code:\r\n\r\n```xml\r\n<script src=\"//cdn.rawgit.com/download/suid/0.10.0/dist/suid.min.js\" \r\n        data-suid-server=\"suid/suid.json\"></script>\r\n<script>\r\n```\r\n```js\r\nvar x = Suid.next();\r\n```\r\n```xml\r\n</script>\r\n```\r\nThis is because suid.js was not given any seed blocks and the first ajax request to\r\nfill up the pool will not have returned yet. You can deal with this in three ways:\r\n* By providing seed data as discussed above\r\n* By ignoring this possibility (feasible if you only generate ID's after user interaction)\r\n* By attaching a listener to `Suid.ready`\r\n\r\nIf the initial period with empty pool is all you fear, you can add a listener to\r\n`Suid.ready` like this:\r\n\r\n```js\r\nSuid.ready(function(){\r\n    var x = Suid.next(); // this will not fail\r\n});\r\n```\r\n\r\nPersonally I am not wrapping my calls to `Suid.next()` in a `try...catch` block, but\r\nI like living on the edge. :)\r\n\r\n## Need a server? \r\nCheck out the Java EE implementation: [suid-server-java](http://download.github.io/suid-server-java/)\r\n\r\n## API documentation\r\n\r\nPlease refer to the [Suid JS API documentation](https://cdn.rawgit.com/download/suid/0.10.0/doc/ws.suid.Suid.html) \r\nfor details on the API.\r\n\r\n## Why Suids?\r\nDatabase IDs are ususally generated by the database itself, using auto-increment. \r\nThe big downside of this is that we need to interact with the server whenever we\r\nneed an ID. When we create new objects, we have to leave the ID field blank for\r\nthe server to fill in later. When we want to refer to those new objects, we can't\r\nuntil we have created the new object on the server and have been issued an ID.\r\nThis creates a strong dependency on the server that is detrimental for offline apps.\r\nFurthermore database ID's are only unique for the table they correspond with.\r\nHaving *just* an ID, we cannot know which record it corresponds with. We would like\r\nto have IDs which are unique across all our tables. \r\n\r\nTo solve these issues we can use a distributed ID generator. We could use GUIDs\r\nbut they are loooooong. There are some nice solutions out there using randomness \r\nto generate short IDs, such as [shortid](https://github.com/dylang/shortid). \r\nHowever, random-based ID's have a balancing act between uniqueness and length. \r\nMake them too short and you *will* get collisions. Make them too long and they \r\nare... well... too long!  ;)\r\n\r\nAlso these ID generators don't generate ordered IDs. This can be an advantage (from \r\na security perspective) but you also lose a lot of pleasant properties that come\r\nwith ordered IDs. One of which is that with ordered IDs you start with the shortest\r\npossible IDs and end with the long ones. \r\n\r\nSo.. is there middle ground? The best of both worlds? I think so. Which is why I\r\nbuilt Suid.\r\n\r\n### Distributed but coordinated\r\nSuids are coordinated by a central server. The server hands out ID blocks, each of\r\nwhich allows an ID generator to generate up to 64 IDs without any further need\r\nfor communication with the server. It's implementation is inspired by \r\n[the mechanism Flickr uses](http://code.flickr.net/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/)\r\nfor generating their IDs. Flickr however serves IDs one at a time, whereas Suid\r\nservers hand out IDs in blocks of 64 to minimize network overhead and facilitate\r\nlonger periods of offline usage.\r\n\r\n### Short\r\nSuids fit in 53-bits, which means they can be treated as a native number in all \r\nmajor programming languages, including PHP and Javascript. And because they are\r\nordered, they start out *very* short and only grow longer as time goes by and\r\nmore and more of them are issued. They will never become longer than 11 characters.\r\nHere is an example of the length of the ID as more and more IDs get issued:\r\n\r\n\tBefore 1K: XX\r\n\tAfter 1K:  XXX\r\n\tAfter 1M:  XXXXX\r\n\tAfter 1G:  XXXXXXX\r\n\tAfter 1T:  XXXXXXXXX\r\n\tAfter 1P:  XXXXXXXXXXX\r\n\r\nThe first thousand IDs can be encoded using just two characters. Between a thousand \r\nand a million IDs can be generated that use three to four characters. From a million\r\nto a billion IDs can be generated using five to six characters. Only after we have\r\nissued dozens of billions of IDs do we get IDs of 8 characters or longer.\r\n \r\nThe total ID space of a suid can contain `9,007,199,254,740,992` or \r\n9 quadrillion, 7 trillion, 199 billion, 254 million, 740 thousand 992 IDs.  :)\r\n\r\n### Sweet\r\nThe default representation of a Suid uses base-36, an alphabet with 36 different symbols \r\n(`0..9a..z`), and are easy for humans to read, write and pronounce, as well as URL-safe.\r\nUsing (only lowercase!) letters in addition to the decimals actually makes the IDs easier\r\nfor humans to work with, Just compare:\r\n\r\n\t14she\r\n\t1903154\r\n\r\nEspecially when having to read an ID to someone over the phone, adding in uppercase letters\r\nand special symbols such as dash `-`, tilde `~` and underscore `_` makes the process very\r\nerror-prone and tedious.\r\n\r\n## Technical background\r\nThe 53 bits in a suid are distributed over a 64-bit long as depicted below:\r\n\r\n\t                 HIGH INT                                         LOW INT\r\n\t _______________________________________________________________________________________________\r\n\t|                                               |                                               |\r\n\t| 0000 0000 | 000b bbbb | bbbb bbbb | bbbb bbbb | bbbb bbbb | bbbb bbbb | bbbb bbbb | biii iiis |\r\n\t|_______________________________________________|_______________________________________________|\r\n\t\r\n\t0 = 11 reserved bits\r\n\tb = 46 block bits\r\n\ti = 6 ID bits\r\n\ts = 1 shard bit\r\n\r\nThe first 11 bits are reserved and always set to `0`. The next 46 bits are used for\r\nthe `block` number. These are handed out by a centralized server. Then there are 6 `ID`\r\nbits which are to be filled in by the generator. The last bit is reserved for the `shard`\r\nID. To prevent a single point of failure, two separate hosts can be handing out ID's for \r\na certain domain, each with their own `shard` ID (`0` or `1`).\r\n\r\nWhen encoded to JSON, suids are represented as strings, e.g.: `'14she'`. The API offers \r\na [toJSON](https://cdn.rawgit.com/download/suid/0.10.0/doc/ws.suid.Suid.html#toJSON) method, \r\nas well as a [revive](//cdn.rawgit.com/download/suid/0.10.0/doc/ws.suid.Suid.html#.Suid.revive) \r\nfunction that generates a reviver for a field in an object.\r\n\r\n## Copyright\r\nCopyright (c) 2015 by [Stijn de Witt](http://StijnDeWitt.com). Some rights reserved.\r\n\r\n## License\r\n[Creative Commons Attribution 4.0 International (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}